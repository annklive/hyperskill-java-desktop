package carsharing;

import java.sql.*;

import java.util.Scanner;
import java.util.ArrayList;

class Car {
    int id;
    String name;
    int companyId;
    Car(int id, String name, int companyId) {
        this.id = id;
        this.name = name;
        this.companyId = companyId;
    }
}

class Company {
    int id;
    String name;
    Company(int id, String name) {
        this.id = id;
        this.name = name;
    }
}

public class Main {
    static final String JDBC_DRIVER = "org.h2.Driver";
    static final String DB_URL = "jdbc:h2:./src/carsharing/db/";
    static Scanner scanner = new Scanner(System.in);

    static String dbName = "test";
    static final String createCompanyTbl = "CREATE TABLE IF NOT EXISTS COMPANY " +
            "(ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
            " NAME VARCHAR(255) UNIQUE NOT NULL)";

    static final String createCarTbl = "CREATE TABLE IF NOT EXISTS CAR " +
            "(ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
            "NAME VARCHAR(255) UNIQUE NOT NULL, " +
            "COMPANY_ID INT NOT NULL, " +
            "FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY(ID))";

    static final String createCustomerTbl = "CREATE TABLE IF NOT EXISTS CUSTOMER " +
            "(ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
            "NAME VARCHAR(255) UNIQUE NOT NULL," +
            "RENTED_CAR_ID INT DEFAULT NULL, " +
            "FOREIGN KEY (RENTED_CAR_ID) REFERENCES CAR(ID))";
    static final String insertCompany = "INSERT INTO COMPANY (NAME) VALUES (?)";
    static final String getCompanies = "SELECT id, name FROM COMPANY ORDER BY ID";

    static final String getCompanyById = "SELECT name FROM COMPANY WHERE id=";

    static final String listCarByCompany = "SELECT id, name FROM CAR WHERE company_id=";
    static final String insertNewCar = "INSERT INTO CAR (NAME, COMPANY_ID) VALUES(?, ?)";

    static final String insertNewCustomer = "INSERT INTO CUSTOMER (NAME) VALUES (?)";

    static final String selectCustomers = "SELECT id, name FROM CUSTOMER";

    static final String getCustomerRentedCar =
            "SELECT car.name as car_name, company.name as comp_name " +
            "FROM customer, car, company " +
            "WHERE customer.id = ? AND " +
            "customer.rented_car_id = car.id AND " +
            "company.id = car.company_id";

    static final String returnRentedCar = "UPDATE CUSTOMER SET RENTED_CAR_ID = null WHERE id = ?";

    static final String custRentedACar = "SELECT RENTED_CAR_ID FROM CUSTOMER WHERE id = ?";

    static final String companyAvailableCars = "SELECT CAR.id as car_id, CAR.name as car_name " +
            "FROM car, company " +
            "WHERE company.id = ? AND " +
            " car.company_id = company.id AND " +
            " car.id NOT IN " +
            " (SELECT DISTINCT RENTED_CAR_ID FROM CUSTOMER WHERE RENTED_CAR_ID is not NULL)";

    static final String rentACarForCustomer = "UPDATE CUSTOMER SET RENTED_CAR_ID = ? " +
            "WHERE id = ?";

    static Connection getDbConnection() {
        Connection conn = null;
        try {
            Class.forName(JDBC_DRIVER);
            conn = DriverManager.getConnection(DB_URL + dbName);
            conn.setAutoCommit(true);
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (SQLException ex) {
            ex.printStackTrace();
        } finally {
            return conn;
        }
    }

    static void createDatabase() {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = getDbConnection();
            stmt = conn.createStatement();
            stmt.executeUpdate(createCompanyTbl);
            stmt.executeUpdate(createCarTbl);
            stmt.executeUpdate(createCustomerTbl);
            stmt.close();
            conn.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try{
                if(stmt!=null) stmt.close();
            } catch(SQLException se2) {
            } // nothing we can do
            try {
                if(conn!=null) conn.close();
            } catch(SQLException se){
                se.printStackTrace();
            } //end finally try
        }
    }

    static int selectMainMenu() {
        System.out.println();
        System.out.println("1. Log in as a manager");
        System.out.println("2. Log in as a customer");
        System.out.println("3. Create a customer");
        System.out.println("0. Exit");

        int option = scanner.nextInt();
        return option;
    }
    static int selectManagerMenu() {
        System.out.println("1. Company list");
        System.out.println("2. Create a company");
        System.out.println("0. Back");

        int option = scanner.nextInt();
        return option;
    }

    static Company chooseCompany(String prompt) {
        ArrayList<Company> companies = new ArrayList<>();

        System.out.println();
        Connection conn = getDbConnection();
        try (Statement stmt = conn.createStatement()) {
            ResultSet rs = stmt.executeQuery(getCompanies);
            while (rs.next()) {
                if (companies.size() == 0) {
                    System.out.println(prompt);
                }
                int cId = rs.getInt("id");
                String cName = rs.getString("name");
                companies.add(new Company(cId, cName));
                System.out.println(companies.size() + ". " + cName);
            }
            System.out.println("0. Back");
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        if (companies.size() == 0) {
            System.out.println("The company list is empty!");
            return null;
        } else {
            int companyNumber = scanner.nextInt();
            if (companyNumber > 0) {
                return companies.get(companyNumber - 1);
            } else {
                return null;
            }
        }
    }

    static void createCompany() {
        System.out.println();
        System.out.println("Enter the company name:");
        String companyName = "";
        int row = 0;
        while (companyName.length() == 0) {
            companyName = scanner.nextLine();
        }
        Connection conn = getDbConnection();
        try (PreparedStatement stmt = conn.prepareStatement(insertCompany,
                Statement.RETURN_GENERATED_KEYS)) {
            stmt.setString(1, companyName);
            row = stmt.executeUpdate();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        if (row == 1) {
            System.out.println("The company was created!");
        }
    }

    static String getCompanyById(int companyId) {
        String name = null;
        Connection conn = getDbConnection();
        try (Statement stmt = conn.createStatement()) {
            ResultSet rs = stmt.executeQuery(getCompanyById+companyId);
            while (rs.next()) {
                name = rs.getString("name");
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return name;
     }
     static int getCarAction() {
         System.out.println("1. Car list");
         System.out.println("2. Create a car");
         System.out.println("0. Back");
         int option = scanner.nextInt();
         return  option;
     }
     static void listCar(int companyId) {
        int numCars = 0;
        Connection conn = getDbConnection();
        try(Statement stmt = conn.createStatement()) {
            ResultSet rs = stmt.executeQuery(listCarByCompany+companyId);
            while (rs.next()) {
                int carId = rs.getInt("id");
                String carName = rs.getString("name");
                if (numCars == 0) {
                    System.out.println("Car list:");
                }
                numCars++;
                System.out.println(numCars + ". " + carName);
            }
         } catch(SQLException ex) {
            ex.printStackTrace();
        }
        if (numCars == 0) {
            System.out.println("The car list is empty!");
        }
     }
     static void addCar(int companyId) {
         System.out.println("Enter the car name:");
         String carName = "";
         while (carName.length() == 0) {
             carName = scanner.nextLine();
         }
         int row = 0;
         Connection conn = getDbConnection();
         try (PreparedStatement stmt = conn.prepareStatement(insertNewCar,
                 Statement.RETURN_GENERATED_KEYS)) {
             stmt.setString(1, carName);
             stmt.setInt(2, companyId);
             row = stmt.executeUpdate();
         } catch (SQLException ex) {
             ex.printStackTrace();
         }
         if (row == 1) {
             System.out.println("The car was added!");
         }
     }

    static void doCarActions(int companyId) {
        String companyName = getCompanyById(companyId);
        boolean done = false;
        System.out.println("'" + companyName + "' company");
        while (!done) {
            int action = getCarAction();
            switch (action) {
                case 1:
                    listCar(companyId);
                    break;
                case 2:
                    addCar(companyId);
                    break;
                case 0:
                    done = true;
                    break;
                default:
                    break;
            }
        }
    }

    static void doCreateCustomer() {
        System.out.println("Enter the customer name:");
        String custName = "";
        while (custName.length() == 0) {
            custName = scanner.nextLine();
        }

        int row = 0;
        Connection conn = getDbConnection();
        try (PreparedStatement stmt = conn.prepareStatement(
                insertNewCustomer, Statement.RETURN_GENERATED_KEYS
        )) {
            stmt.setString(1, custName);

            row = stmt.executeUpdate();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        if (row == 1) {
            System.out.println("The customer was added!");
        }
    }

    static int selectCustomer() {
        int numCust = 0;
        int selectedCustomer = 0;
        Connection conn = getDbConnection();
        try (Statement stmt = conn.createStatement()) {
            ResultSet rs = stmt.executeQuery(selectCustomers);
            while (rs.next()) {
                if (numCust == 0) {
                    System.out.println("Customer list:");
                }
                int custId = rs.getInt("id");
                String custName = rs.getString("name");
                System.out.println(custId + ". " + custName);
                numCust++;
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        if (numCust <= 0) {
            System.out.println("The customer list is empty!");
        } else {
            System.out.println("0. Back");
            selectedCustomer = scanner.nextInt();
        }
        return  selectedCustomer;
    }

    static int chooseCustomerAction() {
        System.out.println("1. Rent a car");
        System.out.println("2. Return a rented car");
        System.out.println("3. My rented car");
        System.out.println("0. Back");
        int option = scanner.nextInt();
        return option;
    }

    static void showCustomerRentedCar(int custId) {
        Connection conn = getDbConnection();
        int numRented = 0;
        try (PreparedStatement stmt = conn.prepareStatement(getCustomerRentedCar,
                Statement.RETURN_GENERATED_KEYS)) {
            stmt.setInt(1, custId);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                String carName = rs.getString("car_name");
                String compName = rs.getString("comp_name");
                System.out.println("You rented car:");
                System.out.println(carName);
                System.out.println("Company:");;
                System.out.println(compName);
                numRented++;
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        if (numRented == 0) {
            System.out.println("You didn't rent a car!");
        }
    }
    static void returnRentedCar(int custId) {
        if (!isRentedACar(custId)) {
            System.out.println("You didn't rent a car!");
        } else {
            Connection conn = getDbConnection();
            try (PreparedStatement stmt = conn.prepareStatement(returnRentedCar)) {
                stmt.setInt(1, custId);
                stmt.executeUpdate();
                System.out.println("You've returned a rented car!");
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }

    static boolean isRentedACar(int custId) {
        Connection conn = getDbConnection();
        try (PreparedStatement stmt = conn.prepareStatement(custRentedACar)) {
            stmt.setInt(1, custId);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                int carId = rs.getInt("RENTED_CAR_ID");
                return !rs.wasNull();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return false;
    }

    static ArrayList<Car> getCompanyCars(int compnayId) {
        ArrayList<Car> cars = new ArrayList<>();

        Connection conn = getDbConnection();
        try (PreparedStatement stmt = conn.prepareStatement(companyAvailableCars)) {
            stmt.setInt(1, compnayId);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                int carId = rs.getInt("car_id");
                String carName = rs.getString("car_name");
                cars.add(new Car(carId, carName, compnayId));
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return cars;
    }

    static int doRentACar(int custId, Car car) {
        int numRented = 0;
        Connection conn = getDbConnection();
        try (PreparedStatement stmt = conn.prepareStatement(rentACarForCustomer)) {
            stmt.setInt(1, car.id);
            stmt.setInt(2, custId);
            numRented = stmt.executeUpdate();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return numRented;
    }
    static void rentACar(int custId) {
        if (isRentedACar(custId)) {
            System.out.println("You've already rented a car!");
        } else {
            Company company = chooseCompany("Choose the company:");
            if (company != null) {
                ArrayList<Car> cars = getCompanyCars(company.id);
                if (cars.size() == 0) {
                    System.out.println("No available cars in the '" + company.name + "' company");
                } else {
                    System.out.println("Choose a car:");
                    for (int i = 0; i < cars.size(); i++) {
                        System.out.println((i+1) + ". " + cars.get(i).name);
                    }
                    System.out.println("0. Back");

                    int carNum = scanner.nextInt();
                    if (carNum > 0) {
                        Car rentedCar = cars.get(carNum-1);
                        int numRented = doRentACar(custId, rentedCar);
                        if (numRented == 1) {
                            System.out.println("You rented '" + rentedCar.name + "'");
                        }
                    }
                }
            }
        }
    }
    static void doCustomerActions(int custId) {
        boolean done = false;
        while (!done) {
            int action = chooseCustomerAction();
            switch (action) {
                case 1:
                    rentACar(custId);
                    break;
                case 2:
                    returnRentedCar(custId);
                    break;
                case 3:
                    showCustomerRentedCar(custId);
                    break;
                case 0:
                    done = true;
                    break;
                default:
                    break;
            }
        }
    }

    public static void main(String[] args) {
        if ((args.length == 2) && args[0].equals("-databaseFileName")) {
            dbName = args[1];
        }
        createDatabase();
        while (true) {
            int menuOption = selectMainMenu();
            if (menuOption == 0) {
                break;
            } else if (menuOption == 1) {
                boolean done = false;
                while(!done) {
                    int managerMenuOption = selectManagerMenu();
                    switch (managerMenuOption) {
                        case 1:
                                Company company = chooseCompany("Choose the company:");
                                if (company != null) {
                                    doCarActions(company.id);
                                }
                                break;
                        case 2: createCompany();
                                break;
                        case 0: done = true;
                                break;
                        default:
                            break;
                    }
                }
            } else if (menuOption == 2) {
                int custId = selectCustomer();
                if (custId > 0) {
                    doCustomerActions(custId);
                }
            } else if (menuOption == 3) {
                doCreateCustomer();
            }
        }
    }
}
